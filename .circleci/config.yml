version: 2.1

aliases:
  docker-image: &image
    - image: mambaorg/micromamba
  filter-pr-only: &PR-only
    branches:
      ignore:
        - master
    tags:
      ignore:
        - /.*/
  filter-master-only: &master-only
    branches:
      only:
        - master
  filter-tags-only: &official-tag
    branches:
      ignore:
        - /.*/
    tags:
      only:
        - /^pytest-monitor-.*/
  matrix: &build-matrix
      parameters:
        python: [ "3.8", "3.9", "3.10", "3.11" ]
        pytest: [ "6.1", "7" ]
      exclude:
        - pytest: "6.1"
          python: "3.11"
        - pytest: "6.1"
          python: "3.9"
        - pytest: "6.1"
          python: "3.10"

commands:
  make-env:
    description: "Create a brand new environment"
    parameters:
      python:
        type: string
        default: "3"
        description: "Python version to use for building"
      pytest:
        type: string
        default: "7"
        description: "Pytest version to use for testing"
      use_specific_requirements_file:
        type: string
        default: "requirements.txt"
        description: "Add specific requirements listed in a file to the environment. "
      extra_deps:
        type: string
        default: ""
        description: "Extra dependencies to install (given as a space separated string)"
      channels:
        type: string
        default: "https://conda.anaconda.org/conda-forge"
        description: "List of channels for fetching packages"
      publish_mode:
        type: boolean
        default: false
        description: "If true, does not pin versions in requirements.txt"
    steps:
      - when:
          condition:
            not: << parameters.publish_mode >>
          steps:
            - checkout
            - run:
                name: "Apply dependency constraints"
                command: |
                  if [ "<< parameters.pytest >>" != "" ]; then
                    sed -i 's/pytest/pytest=<< parameters.pytest >>/g' << parameters.use_specific_requirements_file >>
                  fi
                  echo "" >> << parameters.use_specific_requirements_file >>
                  if [ "<< parameters.extra_deps >>" != "" ]; then
                    for dep in << parameters.extra_deps >>
                    do 
                      echo $dep >> << parameters.use_specific_requirements_file >>
                    done
                  fi
            - run:
                name: "Create environment"
                command: |
                  micromamba create -n project
                  channels=$(echo << parameters.channels >> | sed "s/ / -c /g")
                  requirements=$(cat requirements.txt | tr '\n' ' ')
                  micromamba install -n project -y python=<< parameters.python >> pip $requirements -c $channels
            - run:
                name: "Install project in environment"
                command: |
                  eval "$(micromamba shell hook --shell=bash)"
                  micromamba activate project
                  python -m pip install -e .
            - run:
                name: "Dumping env"
                command: |
                  micromamba env export --name project --explicit > manifest.txt
            - store_artifacts:
                path: manifest.txt
      - when:
          condition: << parameters.publish_mode >>
          steps:
            - checkout
            - run:
                name: "Create environment"
                command: |
                  micromamba create -n project
                  channels=$(echo << parameters.channels >> | sed "s/ / -c /g")
                  requirements=$(cat requirements.txt | tr '\n' ' ')
                  micromamba install -n project -y python=<< parameters.python >> $requirements -c $channels
                  micromamba install -n project -y << parameters.extra_deps >> -c $channels

  lint-project:
    description: "Check code style"
    steps:
      - run:
          name: "Check formatting (black)"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            black .
      - run:
          name: "Check code style (flake8)"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            flake8 .
      - run:
          name: "Check import order (isort)"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            isort .
  test-project:
    description: "Run all the test and store the results"
    parameters:
      runner:
        type: string
        default: "pytest"
        description: "Test executor"
      params:
        type: string
        default: "-v"
        description: "Test executor parameters"
    steps:
      - run:
          name: "Launch test"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            mkdir test-results
            << parameters.runner >> <<parameters.params >> --junit-xml=test-results/junit.xml
      - store_test_results:
          path: test-results/junit.xml
      - store_artifacts:
          path: test-results/junit.xml
  inject-pypi:
    description: "Inject pypi credentials"
    steps:
      - run:
          name: "Setup Pypi"
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

  package-project:
    description: "Package project"
    steps:
      - run:
          name: "Make Packages"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            python -m build
  publish-project:
    description: "Send sdist and wheels to Pypi"
    steps:
      - run:
          name: "Publish"
          command: |
            eval "$(micromamba shell hook --shell=bash)"
            micromamba activate project
            twine upload dist/*
          

# Workflow definition
workflows:
  PR:
    jobs:
      - lint
      - build:
          matrix: *build-matrix
          name: "build-py<< matrix.python >>-pytest << matrix.pytest >>"
          filters: *PR-only
          requires:
            - lint

  deploy:
    jobs:
      - publish:
          filters: *official-tag

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters: *master-only
    jobs:
      - build:
          python: "3"
          pytest: "7"


jobs:
  lint:
    docker: *image
    steps:
      - make-env:
          use_specific_requirements_file: requirements.dev.txt
      - lint-project
  build:
    docker: *image
    parameters:
        python:
            type: string
        pytest:
            type: string
    steps:
      - make-env:
          extra_deps: mock
          python: << parameters.python >>
          pytest: << parameters.pytest >>
      - test-project
  publish:
    docker: *image
    steps:
      - make-env:
          extra_deps: twine setuptools build
          channels: https://conda.anaconda.org/conda-forge defaults anaconda
          publish_mode: true
      - inject-pypi
      - package-project
      - publish-project